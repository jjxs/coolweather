'''
	新建项目和应用
		django-admin.py startproject learn_models # 新建一个项目
		cd learn_models # 进入到该项目的文件夹
		django-admin.py startapp people # 新建一个 people 应用（app)
		一个项目一般包含多个应用，一个应用也可以用在多个项目中。
		
	urls.py
		网址入口，关联到对应的views.py中的一个函数（或者generic类），访问网址就对应一个函数。

	views.py
		处理用户发出的请求，从urls.py中对应过来, 通过渲染templates中的网页可以将显示内容，比如登陆后的用户名，用户请求的数据，输出到网页。

	models.py
		与数据库操作相关，存入或读取数据时用到这个，当然用不到数据库的时候 你可以不使用。

	forms.py
		表单，用户在浏览器上输入数据提交，对数据的验证工作以及输入框的生成等工作，当然你也可以不使用。

	templates 
		文件夹

	views.py 
		中的函数渲染templates中的Html模板，得到动态内容的网页，当然可以用缓存来提高速度。

	admin.py
		后台，可以用很少量的代码就拥有一个强大的后台。

	settings.py
		Django 的设置，配置文件，比如 DEBUG 的开关，静态文件的位置等。
		
	如果是在另一台电脑上访问要用 python manage.py ip:port 的形式
		python manage.py runserver 0.0.0.0:8000
		
	同步所有的数据表 （也是创建module之后执行此命令 迁移到数据库）
		# 进入包含有 manage.py 的文件夹
		python manage.py makemigrations
		python manage.py migrate
		如果是 Django 不主动提示创建管理员（Django 1.9不提示）用下面的命令创建一个帐号
			python manage.py createsuperuser
	
	使用开发服务器 	 	
		# 当提示端口被占用的时候，可以用其它端口：
		python manage.py runserver 8001
		python manage.py runserver 9999
		（当然也可以kill掉占用端口的进程，具体后面有讲，此处想知道的同学可查下 lsof 命令用法） 		 
		# 监听机器所有可用 ip （电脑可能有多个内网ip或多个外网ip）
		python manage.py runserver 0.0.0.0:8000
		# 如果是外网或者局域网电脑上可以用其它电脑查看开发服务器
		# 访问对应的 ip加端口，比如 http://172.16.20.2:8000
		
		清空数据库
			python manage.py flush
			此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表
		
		创建超级管理员
			python manage.py createsuperuser 			 
			# 按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填 			 
			# 修改 用户密码可以用：
			python manage.py changepassword username
			
		导出数据 导入数据
			python manage.py dumpdata appname > appname.json
			python manage.py loaddata appname.json
'''

'''
	Django生命周期:
		前端发送请求-->Django的wsgi-->中间件-->路由系统-->视图-->ORM数据库操作-->模板-->返回数据给用户
	django rest framework生命周期：
		发送请求-->Django的wsgi-->中间件-->路由系统_执行CBV的as_view()，就是执行内部的dispath方法-->在执行dispath之前，
		有版本分析 和 渲染器-->在dispath内，对request封装-->版本-->认证-->权限-->限流-->视图-->
		如果视图用到缓存( request.data or   request.query_params )就用到了 
		解析器-->视图处理数据，用到了序列化(对数据进行序列化或验证) -->视图返回数据可以用到分页
'''

'''
	django从1.9开始ForeignKey中的on_delete参数是必须的。
'''
