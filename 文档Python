# 单行注释
print('# 单行注释');

''' 
	多行注释1
'''
print("多行(''')注释1");

"""
	多行注释2
"""
print('多行(""")注释2');

'''
	+ - * / (运算分组)
'''
print('(+-*/)括号做运算分组');

'''
	数字运算符
	运算符 // 表示舍弃浮点型返回整数
'''
print(17/5);
print(17//5);

'''
	幂运算 **
'''
print(5**2);

'''
	变量在使用前必须先定义
'''
#n;
#print('未定义'+ n); # 不定义 name 'n' is not defined

c = '1';
print('正确定义'+ c);

''' TODO
	_ 只读变量（再次个人认为特殊变量） 不要显示地给它赋值--
	
	这样您将会创建一个具有相同名称的独立的本地变量，并且屏蔽了这个内置变量的功能。
'''
tax = 12.5 / 100
price = 100.50
print('tax和price的乘积是：');
print(price * tax); #12.5625
print('price + _(内置变量)：');
# >>> price + _  #113.0625
# >>> roundNum = round(_,2); #113.06

'''
	python 内置变量全局
	__doc__: 获取文件注释
	__file__:【重点】获取当前文件的路径
	__file__，一般配合os模块os.path.dirname()、os.path.basename()、os.path.join()模块函数来使用
	__package__:获取导入文件的路径，多层目录以点分割，注意：对当前文件返回None
	__cached__:获取导入文件的缓存路径
	__name__：获取导入文件的路径加文件名称，路径以点分割，注意：获取当前文件返回__main__
			全局变量写在入口文件里，只有执行入口文件时的返回值才是__main__，
			如果入口文件被导入到别的文件里，此时入口文件的__name__返回值为模块名称
			
			每个模块都有一个__name__属性，当其值是'__main__'时，
			表明该模块自身在运行，否则是被引入。
			
	__builtins__：【重点】内置函数在这里面
	
	dir() 函数
		内置的函数 dir() 可以找到模块内定义的所有名称。
'''
print(__doc__); # TODO 未解惑

'''
	字符串
	字符串可单引号可双引号 
	\' \" 转字符
	\n 换号
	'''''' """""" 可以代替\n 做字段格式
'''
print('\" yes \"');
print('\' yes \'\nNo');

'''
	+ 做链接
	*5 做重复
'''
str = 'hello' + 'A'
s = str*3 #重复3次
print(s);

'''
	strip() 去除收尾
'''
str1 = "00000003210Runoob01230000000"; 
print(str1.strip( '0' ));  # 去除首尾字符 0

'''
	: 分切符号 分隔俩个索引 
'''
str2 = 'hello word';
print(str2[4]);
print(str2[4:7]);
print(str2[:7]);

'''
	python 字符串不能被改变
	想一个索引赋值会导致错误
'''
#str3 = 'hello';
#str3[1] = 'o';
#print(str3); # 报错： 'str' object does not support slice assignment 字符串不支持切片分配

'''
	在分切操作字符串时，有一个很有用的规律： s[:i] + s[i:] 等于 s.
	对于有偏差的分切索引的处理方式也很优雅：
	一个过大的索引将被字符串的大小取代，上限值小于下限值将返回一个空字符串。
	索引负数从右到左计数
	len() 返回长度 从1计数
'''
str4 = 'hello';
print(str4[:2]+str4[2:]);
print(len(str4)-1);

'''
	列表
		列表内的项目不必全是相同的类型
		+ 可做拼接
		字符串不可改变  列表可以改变索引的值
		append() 在列表末尾添加值
		len() 统计列表 从1计数
'''
aList = ['spam', 'eggs', 100, 1234,];
print(aList);
print(aList[:3]);
print(aList[:]); # : 切片复制
print(len(aList));
cList = [1,23,4];
x = [aList , cList];
print(x[0]);
print(x[0][1]);
aList[:] = []; # 清空列表
print(aList);

'''
	编程第一步
	斐波纳契数 数列从第3项开始，每一项都等于前两项之和
	有趣的是，这样一个完全是自然数的数列，通项公式却是用无理数来表达的。
	而且当n趋向于无穷大时，前一项与后一项的比值越来越逼近黄金分割0.618
	（或者说后一项与前一项的比值小数部分越来越逼近0.618）。
	1÷1=1，1÷2=0.5，2÷3=0.666...，3÷5=0.6，5÷8=0.625…………，
	55÷89=0.617977……………144÷233=0.618025…46368÷75025=0.6180339886…...
	越到后面，这些比值越接近黄金比
	
	end() 关键字end可以被用于防止输出新的一行，或者在输出的末尾添加不同的字符end = '，'
'''
aNum,bNum = 0,1
while bNum < 10:
	print(bNum)
	aNum,bNum = bNum,aNum+bNum

def fib(n):
	a,b = 0,1
	while a<n:
		print(a,end = '，') # end = ' '空格
		a,b = b,a+b
		#print("") # 换行
fib(100); # 100以内的斐波那契数列

'''
	条件语句
	if  < 小于 <= > 大于 >= == !=
'''
number = 7
guess = -1
print("Guess the number!")
while guess != number:
    guess = int(input("Is it... "))
  
    if guess == number:
        print("Hooray! You guessed it right!")
    elif guess < number:
        print("It's bigger...")
    elif guess > number:
        print("It's not so big.")

'''
	循环语句
	Python中的循环语句有 for 和 while  break continue
	
	range()函数
		内置函数，range(5)遍历数字序列
		range(0,10) 之间遍历 不包含10
		range(0,10,3) 3的增量遍历
		还可以使用range()函数来创建一个列表 list[range(5)] # [0,1,2,3,4]
	结合range()和len()函数以遍历一个序列的索引 
	pass语句
		pass语句什么都不做。它只在语法上需要一条语句但程序不需要任何操作时使用.
'''
n = 100
sum = 0
counter = 1
while counter <= n:
    sum = sum + counter
    counter += 1
 
print("Sum of 1 until %d: %d" % (n,sum))

# for格式
'''
	for <variable> in <sequence>:
		<statements>
	else:
		<statements>
'''
# 实例：
languages = ["C", "C++", "Perl", "Python"];
for x in languages:
	print(x)
for x in languages:
	if x =="C++":
		print('No');
		break;
	print("Great" + x);
else:
	print("No C++");
print("Finally")
languages2 = ["C", "C++", "Perl", "Python"];
for i in range(len(languages2)):
	print(i,languages2[i])

'''
	python 函数
		def  函数名（参数列表）：
			函数体
	变量： 函数内部局部变量 外部全局变量
	关键字参数
		函数也可以使用 kwarg=value 的关键字参数形式被调用
	可变参数列表
		def mean(*args): # *args 可变参数
	匿名函数 lambda
		lambda函数的语法只包含一个语句
		lambda [arg1 [,arg2,.....argn]]:expression
	实例：
		#可写函数说明
		sum = lambda arg1, arg2: arg1 + arg2
		  
		#调用sum函数
		print "Value of total : ", sum( 10, 20 )
'''

'''
	python 数据结构
	###再次重申： 列表是可变的，但是字符串和元组不能。
	列表方法：
		1、list.append(x) 相当于 a[len(a):] =[x]
		2、list.extend(L) 相当于 a[len(a):] = L
		3、list.insert(i, x) 指定位置插入 第一个参数是准备插入前一个元素索引
			a.insert(0, x) 插入整个列表之前
			a.insert(len(a), x) 相当于 list.append(x)
		4、list.remove(x) 删除列表中值x第一个元素  如果没有返回错误
		5、list.pop([i]) #[]代表是可选的参数  指定位置删除  没有返回最后一个元素删除
		6、list.clear() 移除所有项 相当于 del a[:]
		7、list.index(x) 第一个值为x的索引
		8、list.count(x) 出现次数
		9、list.sort() 排序
		10、list.reverse() 倒序
		11、list.copy() 等于 a[:]
	将列表当做堆栈使用
		堆栈作为特定的数据结构，最先进入的元素最后一个被释放（后进先出）。
		用append()方法添加到堆栈顶。
		用不指定的pop()方法从堆栈顶释放出来。
		stack = [3,4,5];
		stack.append(6)
			stack #[3,4,5,6]
		stack.pop()
			stack #[3,4,5]
	将列表当作队列使用
		效率不高 
		在后加  使用popleft() 从前移除
	列表推导式
		格式： [表达式 for 变量 in 列表]    或者  [表达式 for 变量 in 列表 if 条件]
	嵌套列表解析
'''
# 列表推导式
# 实例
vec = [2, 4, 6]
vec1 = [3*x for x in vec] 
print(vec1)

#>>> vec1 = [2, 4, 6]
#>>> vec2 = [4, 3, -9]
#>>> [x*y for x in vec1 for y in vec2]
#[8, 6, -18, 16, 12, -36, 24, 18, -54]
#>>> [x+y for x in vec1 for y in vec2]
#[6, 5, -7, 8, 7, -5, 10, 9, -3]
#>>> [vec1[i]*vec2[i] for i in range(len(vec1))]
#[8, 12, -54]
# 复杂表达式或嵌套函数
#>>> [str(round(355/113, i)) for i in range(1, 6)]
#['3.1', '3.14', '3.142', '3.1416', '3.14159']

#嵌套列表解析
#>>> matrix = [
#   [1, 2, 3, 4],
#    [5, 6, 7, 8],
#    [9, 10, 11, 12],
#]

#>>> [[row[i] for row in matrix] for i in range(4)]
#[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
# 等于
#transposed = []
#>>> for i in range(4):
#    transposed.append([row[i] for row in matrix])
#>>> transposed
#[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]
# 等于
#>>> transposed = []
#>>> for i in range(4):
#...     # the following 3 lines implement the nested listcomp
#...     transposed_row = []
#...     for row in matrix:
#...         transposed_row.append(row[i])
#...     transposed.append(transposed_row)
#...
#>>> transposed
#[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

'''
	del 语句
		从列表中依索引而不是值来删除元素
		del a 删除实体变量
		del a[0] 删除索引0的值
		del a[1:3] 之间的
		del a[:] 清空列表
	
	元组和序列
		元组由若干逗号分隔的值组成
		实例：
			t = 12345, 54321, 'hello!'
				t
				(12345, 54321, 'hello!')
			u = t, (1, 2, 3, 4, 5)
				u
				((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
		元组在输出时总是有括号的，以便于正确表达嵌套结构。在输入时可能有或没有括号， 
		不过括号通常是必须的（如果元组是更大的表达式的一部分）
	集合
		集合是一个无序不重复元素的集。基本功能包括关系测试和消除重复元素。
		可以用大括号({})创建集合。注意：如果要创建一个空集合，你必须用 set() 而不是 {} ；
		后者创建一个空的字典，
		# 实例：
		>>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
		>>> print(basket)                      # show that duplicates have been removed
		{'orange', 'banana', 'pear', 'apple'}
		>>> 'orange' in basket                 # fast membership testing
		True
		>>> 'crabgrass' in basket
		False
		 
		>>> # Demonstrate set operations on unique letters from two words
		...
		>>> a = set('abracadabra')
		>>> b = set('alacazam')
		>>> a                                  # unique letters in a
		{'a', 'r', 'b', 'c', 'd'}
		>>> a - b                              # letters in a but not in b
		{'r', 'd', 'b'}
		>>> a | b                              # letters in either a or b
		{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
		>>> a & b                              # letters in both a and b
		{'a', 'c'}
		>>> a ^ b                              # letters in a or b but not both
		{'r', 'd', 'b', 'm', 'z', 'l'}
	集合也支持推导式
		>>> a = {x for x in 'abracadabra' if x not in 'abc'}
		>>> a
		{'r', 'd'}
		
	字典
		另一个非常有用的 Python 内建数据类型是字典。
		
		序列是以连续的整数为索引，与此不同的是，字典以关键字为索引，
		关键字可以是任意不可变类型，通常用字符串或数值。
		
		理解字典的最佳方式是把它看做无序的键=>值对集合。
		在同一个字典之内，关键字必须是互不相同。
		
		一对大括号创建一个空的字典：{}。
	#实例：
		>>> tel = {'jack': 4098, 'sape': 4139}
		>>> tel['guido'] = 4127
		>>> tel
		{'sape': 4139, 'guido': 4127, 'jack': 4098}
		>>> tel['jack']
		4098
		>>> del tel['sape']
		>>> tel['irv'] = 4127
		>>> tel
		{'guido': 4127, 'irv': 4127, 'jack': 4098}
		>>> list(tel.keys())
		['irv', 'guido', 'jack']
		>>> sorted(tel.keys())
		['guido', 'irv', 'jack']
		>>> 'guido' in tel
		True
		>>> 'jack' not in tel
		False
		
	构造函数 dict() 直接从键值对元组列表中构建字典。如果有固定的模式，
	列表推导式指定特定的键值对：
		>>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
		{'sape': 4139, 'jack': 4098, 'guido': 4127}
	
	此外，字典推导可以用来创建任意键和值的表达式词典：
		>>> {x: x**2 for x in (2, 4, 6)}
		{2: 4, 4: 16, 6: 36}
	
	如果关键字只是简单的字符串，使用关键字参数指定键值对有时候更方便：
		>>> dict(sape=4139, guido=4127, jack=4098)
		{'sape': 4139, 'jack': 4098, 'guido': 4127}
	
	遍历技巧
		在字典中遍历时，关键字和对应的值可以使用 items() 方法同时解读出来：
			>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}
			>>> for k, v in knights.items():
			...     print(k, v)
			...
			gallahad the pure
			robin the brave
			
		在序列中遍历时，索引位置和对应值可以使用 enumerate() 函数同时得到：
			>>> for i, v in enumerate(['tic', 'tac', 'toe']):
			...     print(i, v)
			...
			0 tic
			1 tac
			2 toe
			
		同时遍历两个或更多的序列，可以使用 zip() 组合：
			>>> questions = ['name', 'quest', 'favorite color']
			>>> answers = ['lancelot', 'the holy grail', 'blue']
			>>> for q, a in zip(questions, answers):
			...     print('What is your {0}?  It is {1}.'.format(q, a))
			...
			What is your name?  It is lancelot.
			What is your quest?  It is the holy grail.
			What is your favorite color?  It is blue.
		要反向遍历一个序列，首先指定这个序列，然后调用 reversesd() 函数：
			>>> for i in reversed(range(1, 10, 2)):
			...     print(i)
			...
			9
			7
			5
			3
			1
		要按顺序遍历一个序列，使用 sorted() 函数返回一个已排序的序列，并不修改原值：
			>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
			>>> for f in sorted(set(basket)):
			...     print(f)
			...
			apple
			banana
			orange
			pear
'''

'''
	列表函数
		1	cmp(list1, list2)
			比较两个列表的元素
		2	len(list)
			列表元素个数
		3	max(list)
			返回列表元素最大值
		4	min(list)
			返回列表元素最小值
		5	list(seq)
			将元组转换为列表
	元组内置函数
		1	cmp(tuple1, tuple2)
			比较两个元组元素。
		2	len(tuple)
			计算元组元素个数。
		3	max(tuple)
			返回元组中元素最大值。
		4	min(tuple)
			返回元组中元素最小值。
		5	tuple(seq)
			将列表转换为元组。
	字典内置函数&方法
		1	cmp(dict1, dict2)
			比较两个字典元素。
		2	len(dict)
			计算字典元素个数，即键的总数。
		3	str(dict)
			输出字典可打印的字符串表示。
		4	type(variable)
			返回输入的变量类型，如果变量是字典就返回字典类型。
	
		1	radiansdict.clear()
			删除字典内所有元素
		2	radiansdict.copy()
			返回一个字典的浅复制
		3	radiansdict.fromkeys()
			创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值
		4	radiansdict.get(key, default=None)
			返回指定键的值，如果值不在字典中返回default值
		5	radiansdict.has_key(key)
			如果键在字典dict里返回true，否则返回false
		6	radiansdict.items()
			以列表返回可遍历的(键, 值) 元组数组
		7	radiansdict.keys()
			以列表返回一个字典所有的键
		8	radiansdict.setdefault(key, default=None)
			和get()类似, 但如果键不已经存在于字典中，将会添加键并将值设为default
		9	radiansdict.update(dict2)
			把字典dict2的键/值对更新到dict里
		10	radiansdict.values()
			以列表返回字典中的所有值
'''

'''
	Python 模块
		文件=模块
		模块定义：函数和变量的文件
'''

import module
module.fib()

'''
	python 输入输出
	格式化 format
		import math
			>>> print('The value of PI is approximately {}.'.format(math.pi))
			The value of PI is approximately 3.14159265359.
		'!a' (使用 ascii()), '!s' (使用 str()) 和 '!r' (使用 repr()) 
		可以用于在格式化某个值之前对其进行转化
		可选项 ':' 和格式标识符可以跟着字段名。 这就允许对值进行更好的格式化。
		下面的例子将 Pi 保留到小数点后三位
			>>> import math
				>>> print('The value of PI is approximately {0:.3f}.'.format(math.pi))
				The value of PI is approximately 3.142.
'''

'''
	读和写文件
	open() 将会返回一个 file 对象，基本语法格式如下:
		open(filename, mode)
	实例:
		>>> f = open('/tmp/workfile', 'w')
			第一个参数为要打开的文件名。
			第二个参数描述文件如何使用的字符。 mode 可以是 'r' 如果文件只读, 
			'w' 只用于写 (如果存在同名文件则将被删除), 和 'a' 用于追加文件内容; 
			所写的任何数据都会被自动增加到末尾. 
			'r+' 同时用于读写。 mode 参数是可选的; 'r' 将是默认值。
	
	文件对象的方法
		f.read()
		为了读取一个文件的内容，调用 f.read(size),
		这将读取一定数目的数据, 然后作为字符串或字节对象返回。
		size 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 
		那么该文件的所有内容都将被读取并且返回。
		>>> f.read()
			'This is the entire file.\n'
		>>> f.read()
			''
		等等......
		
	pickle 模块
		python的pickle模块实现了基本的数据序列和反序列化。
'''

'''
	Python 错误和异常
		Python有两种错误很容易辨认：语法错误和异常。
		
		try:
		
			break
		except xx:
		
		else:
		
		finally:
			try有没有发生异常都会执行
		
		
		raise 抛出异常不作处理
'''

'''
	Python 类
	
	语法格式如下：
		class ClassName:
			<statement-1>
			.
			.
			.
			<statement-N>
	类对象支持两种操作：属性引用和实例化。
	
	类私有方法
		__private_method 两个下划线开头，声明该方法为私有方法，不能在类地外部调用。

		在类的内部调用slef.__private_methods。

		类的专有方法：

		__init__ 构造函数，在生成对象时调用
		__del__ 析构函数，释放对象时使用
		__repr__ 打印，转换
		__setitem__按照索引赋值
		__getitem__按照索引获取值
		__len__获得长度
		__cmp__比较运算
		__call__函数调用
		__add__加运算
		__sub__减运算
		__mul__乘运算
		__div__除运算
		__mod__求余运算
		__pow__称方
'''

'''
	Python 标准库概览
	
		针对日常的文件和目录管理任务，:mod:shutil 模块提供了一个易于使用的高级接口:
			>>> import shutil
			>>> shutil.copyfile('data.db', 'archive.db')
			>>> shutil.move('/build/executables', 'installdir')
		大多脚本的定向终止都使用 "sys.exit()"。
'''

'''
	Python3 基本数据类型
	
		Python中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。
		在Python中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。

		Python 3中有六个标准的数据类型：
		Numbers（数字）
		String（字符串）
		List（列表）
		Tuple（元组）
		Sets（集合）
		Dictionaries（字典）
		Python 3支持int、float、bool、complex（复数）。
		
		Numbers（数字）
			>>> a, b, c, d = 20, 5.5, True, 4+3j
			>>> print(type(a), type(b), type(c), type(d))
			<class 'int'> <class 'float'> <class 'bool'> <class 'complex'>
		String（字符串）	
			如果你不想让反斜杠发生转义，可以在字符串前面添加一个r，表示原始字符串
			另外，反斜杠可以作为续行符，表示下一行是上一行的延续。
		注意：
			1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。
			2、字符串可以用+运算符连接在一起，用*运算符重复。
			3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
			4、Python中的字符串不能改变。
		
		List(列表)
		
			注意：
				1、List写在方括号之间，元素用逗号隔开。
				2、和字符串一样，list可以被索引和切片。
				3、List可以使用+操作符进行拼接。
				4、List中的元素是可以改变的。
				
		Tuple（元组）
			元组（tuple）与列表类似，不同之处在于元组的元素不能修改。
			元组写在小括号里，元素之间用逗号隔开。
			其实，可以把字符串看作一种特殊的元组
			虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表
			
			构造包含0个或1个元素的tuple是个特殊的问题，所以有一些额外的语法规则：
				tup1 = () # 空元组
				tup2 = (20,) # 一个元素，需要在元素后添加逗号
				
			注意：
			1、与字符串一样，元组的元素不能修改。
			2、元组也可以被索引和切片，方法一样。
			3、注意构造包含0或1个元素的元组的特殊语法规则。
			4、元组也可以使用+操作符进行拼接。
			
		Sets（集合）
			集合（set）是一个无序不重复元素的集。
			基本功能是进行成员关系测试和消除重复元素。
			可以使用大括号 或者 set()函数创建set集合，注意：创建一个空集合必须用 set()
			而不是 { }，因为{ }是用来创建一个空字典。
		
			>>> student = {'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'}
			>>> print(student)   # 重复的元素被自动去掉
			{'Jim', 'Jack', 'Mary', 'Tom', 'Rose'}
			>>> 'Rose' in student  # membership testing（成员测试）
			True
			>>> # set可以进行集合运算
			...
			>>> a = set('abracadabra')
			>>> b = set('alacazam')
			>>> a
			{'a', 'b', 'c', 'd', 'r'}
			>>> a - b     # a和b的差集
			{'b', 'd', 'r'}
			>>> a | b     # a和b的并集
			{'l', 'm', 'a', 'b', 'c', 'd', 'z', 'r'}
			>>> a & b     # a和b的交集
			{'a', 'c'}
			>>> a ^ b     # a和b中不同时存在的元素
			{'l', 'm', 'b', 'd', 'z', 'r'}
			
		Dictionaries（字典）
			字典（dictionary）是Python中另一个非常有用的内置数据类型。
			字典是一种映射类型（mapping type），它是一个无序的键 : 值对集合。
			关键字必须使用不可变类型，也就是说list和包含可变类型的tuple不能做关键字。
			在同一个字典中，关键字还必须互不相同。

				>>> dic = {}  # 创建空字典
				>>> tel = {'Jack':1557, 'Tom':1320, 'Rose':1886}
				>>> tel
				{'Tom': 1320, 'Jack': 1557, 'Rose': 1886}
				>>> tel['Jack']   # 主要的操作：通过key查询
				1557
				>>> del tel['Rose']  # 删除一个键值对
				>>> tel['Mary'] = 4127  # 添加一个键值对
				>>> tel
				{'Tom': 1320, 'Jack': 1557, 'Mary': 4127}
				>>> list(tel.keys())  # 返回所有key组成的list
				['Tom', 'Jack', 'Mary']
				>>> sorted(tel.keys()) # 按key排序
				['Jack', 'Mary', 'Tom']
				>>> 'Tom' in tel       # 成员测试
				True
				>>> 'Mary' not in tel  # 成员测试
				False
				
			构造函数 dict() 直接从键值对sequence中构建字典，当然也可以进行推导，如下：
				>>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
				{'jack': 4098, 'sape': 4139, 'guido': 4127}
				 
				>>> {x: x**2 for x in (2, 4, 6)}
				{2: 4, 4: 16, 6: 36}
				 
				>>> dict(sape=4139, guido=4127, jack=4098)
				{'jack': 4098, 'sape': 4139, 'guido': 4127}
			另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。

			注意：
				1、字典是一种映射类型，它的元素是键值对。
				2、字典的关键字必须为不可变类型，且不能重复。
				3、创建空字典使用{ }。

'''
#print('还可以使用"""..."""或者\'''...\'''跨越多行');
a1, b1, c1, d1 = 20, 5.5, True, 4+3j
print(type(a1), type(b1), type(c1), type(d1))
print(r'C:\some\name') #C:\some\name
print('C:\some\"""..."""name')

'''
	打印字符串 %s
		print ("His name is %s"%("Aviad"))
	打印整数	%d
		print ("He is %d years old"%(25))
	打印浮点数	%f
		print ("His height is %f m"%(1.83))
	打印浮点数（指定保留小数点位数）
		print ("His height is %.2f m"%(1.83333))
	指定占位符宽度
		print ("Name:%10s Age:%8d Height:%8.2f"%("Aviad",25,1.83))
	指定占位符宽度（左对齐）
		print ("Name:%-10s Age:%-8d Height:%-8.2f"%("Aviad",25,1.83))
	指定占位符（只能用0当占位符？）
		print ("Name:%-10s Age:%08d Height:%08.2f"%("Aviad",25,1.83))
	科学计数法
		format(0.0015,'.2e')
	我们还可以用词典来传递真实值。如下：
		print ("I'm %(c)s. I have %(l)d yuan." % {'c':'hungry','l':22})
	调试输出：
		I'm hungry. I have 22 yuan.

'''
